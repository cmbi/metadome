import unittest
from metadome.domain.models.entities.meta_domain import MetaDomain,\
    UnsupportedMetaDomainIdentifier, ConsensusPositionOutOfBounds,\
    MalformedMetaDomain
import pandas as pd

class mock_MetaDomain(MetaDomain):
    @classmethod
    def mock_PF00907_metadomain_first_three_consensus_positions(cls):
        r = {'cDNA_position_one': [334, 130, 343, 421, 334, 199, 313, 805, 616, 805, 229, 229, 415, 130, 229, 304, 205, 205, 319, 313, 229, 229, 334, 25, 337, 280, 280, 133, 346, 424, 337, 202, 316, 808, 619, 280, 808, 232, 232, 418, 133, 232, 307, 208, 208, 322, 316, 232, 232, 283, 283, 337, 28, 340, 283, 283, 136, 349, 427, 340, 205, 319, 172, 172, 811, 622, 283, 811, 22, 235, 235, 133, 421, 136, 235, 310, 211, 211, 172, 325, 319, 235, 235, 286, 286, 340, 31], 'strand': ['+', '-', '-', '-', '+', '-', '-', '-', '+', '-', '+', '+', '+', '-', '+', '-', '+', '+', '+', '-', '+', '+', '+', '-', '+', '-', '-', '-', '-', '-', '+', '-', '-', '-', '+', '-', '-', '+', '+', '+', '-', '+', '-', '+', '+', '+', '-', '+', '+', '+', '+', '+', '-', '+', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-', '-', '+', '-', '-', '-', '+', '+', '+', '+', '-', '+', '-', '+', '+', '-', '+', '-', '+', '+', '+', '+', '+', '-'], 'chromosome_position_base_pair_three': [19748729, 166580948, 119474316, 85472336, 19748729, 67402541, 115120691, 27762979, 162273539, 27762979, 41961323, 41961323, 45811237, 166580948, 41961323, 35289637, 59534918, 59534918, 59477858, 115120691, 41961323, 41961323, 19748729, 119474316, 19748732, 30102150, 30102150, 166580945, 119474313, 85472333, 19748732, 67402538, 115120688, 27762976, 162273542, 30102150, 27762976, 41961326, 41961326, 45811240, 166580945, 41961326, 35289634, 59534921, 59534921, 59477861, 115120688, 41961326, 41961326, 79278668, 79278668, 19748732, 119474313, 19748735, 30102147, 30102147, 166580942, 119474310, 85472330, 19748735, 67402535, 115120685, 114839699, 114839699, 27762973, 162273545, 30102147, 27762973, 114839699, 41961329, 41961329, 168250463, 45811243, 166580942, 41961329, 35289631, 59534924, 59534924, 114839699, 59477864, 115120685, 41961329, 41961329, 79278671, 79278671, 19748735, 119474310], 'consensus_pos': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'chromosome_position_base_pair_one': [19748727, 166580950, 119474318, 85472338, 19748727, 67402543, 115120693, 27762981, 162273537, 27762981, 41961321, 41961321, 45811235, 166580950, 41961321, 35289639, 59534916, 59534916, 59477856, 115120693, 41961321, 41961321, 19748727, 119474318, 19748730, 30102152, 30102152, 166580947, 119474315, 85472335, 19748730, 67402540, 115120690, 27762978, 162273540, 30102152, 27762978, 41961324, 41961324, 45811238, 166580947, 41961324, 35289636, 59534919, 59534919, 59477859, 115120690, 41961324, 41961324, 79278666, 79278666, 19748730, 119474315, 19748733, 30102149, 30102149, 166580944, 119474312, 85472332, 19748733, 67402537, 115120687, 114839701, 114839701, 27762975, 162273543, 30102149, 27762975, 114839701, 41961327, 41961327, 168250461, 45811241, 166580944, 41961327, 35289633, 59534922, 59534922, 114839701, 59477862, 115120687, 41961327, 41961327, 79278669, 79278669, 19748733, 119474312], 'Unnamed: 0': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], 'domain_idamino_acid_position': [111, 43, 114, 140, 111, 66, 104, 268, 205, 268, 76, 76, 138, 43, 76, 101, 68, 68, 106, 104, 76, 76, 111, 8, 112, 93, 93, 44, 115, 141, 112, 67, 105, 269, 206, 93, 269, 77, 77, 139, 44, 77, 102, 69, 69, 107, 105, 77, 77, 94, 94, 112, 9, 113, 94, 94, 45, 116, 142, 113, 68, 106, 57, 57, 270, 207, 94, 270, 7, 78, 78, 44, 140, 45, 78, 103, 70, 70, 57, 108, 106, 78, 78, 95, 95, 113, 10], 'amino_acid_residue': ['V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'C', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'Q', 'S', 'S', 'G', 'E', 'D', 'Q', 'Q', 'H', 'Y', 'Y', 'S', 'Y', 'T', 'T', 'A', 'G', 'T', 'S', 'G', 'G', 'T', 'H', 'T', 'T', 'E', 'E', 'Q', 'E', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L'], 'chromosome_position_base_pair_two': [19748728, 166580949, 119474317, 85472337, 19748728, 67402542, 115120692, 27762980, 162273538, 27762980, 41961322, 41961322, 45811236, 166580949, 41961322, 35289638, 59534917, 59534917, 59477857, 115120692, 41961322, 41961322, 19748728, 119474317, 19748731, 30102151, 30102151, 166580946, 119474314, 85472334, 19748731, 67402539, 115120689, 27762977, 162273541, 30102151, 27762977, 41961325, 41961325, 45811239, 166580946, 41961325, 35289635, 59534920, 59534920, 59477860, 115120689, 41961325, 41961325, 79278667, 79278667, 19748731, 119474314, 19748734, 30102148, 30102148, 166580943, 119474311, 85472331, 19748734, 67402536, 115120686, 114839700, 114839700, 27762974, 162273544, 30102148, 27762974, 114839700, 41961328, 41961328, 168250462, 45811242, 166580943, 41961328, 35289632, 59534923, 59534923, 114839700, 59477863, 115120686, 41961328, 41961328, 79278670, 79278670, 19748734, 119474311], 'uniprot_ac': ['O43435-3', 'O15178-2', 'Q96SF7', 'O95935', 'O43435-2', 'O75333', 'O15119-2', 'O95936-4', 'Q16650', 'O95936', 'Q8IWI9-4', 'Q8IWI9-4', 'Q9UL17', 'O15178', 'Q8IWI9', 'Q9UMR3', 'P57082-2', 'P57082', 'Q13207', 'O15119', 'Q8IWI9-3', 'Q8IWI9-3', 'O43435', 'Q96SF7-2', 'O43435-3', 'O95947', 'O95947', 'O15178-2', 'Q96SF7', 'O95935', 'O43435-2', 'O75333', 'O15119-2', 'O95936-4', 'Q16650', 'O95947-2', 'O95936', 'Q8IWI9-4', 'Q8IWI9-4', 'Q9UL17', 'O15178', 'Q8IWI9', 'Q9UMR3', 'P57082-2', 'P57082', 'Q13207', 'O15119', 'Q8IWI9-3', 'Q8IWI9-3', 'Q9Y458', 'Q9Y458', 'O43435', 'Q96SF7-2', 'O43435-3', 'O95947', 'O95947', 'O15178-2', 'Q96SF7', 'O95935', 'O43435-2', 'O75333', 'O15119-2', 'Q99593', 'Q99593', 'O95936-4', 'Q16650', 'O95947-2', 'O95936', 'Q99593-3', 'Q8IWI9-4', 'Q8IWI9-4', 'O60806', 'Q9UL17', 'O15178', 'Q8IWI9', 'Q9UMR3', 'P57082-2', 'P57082', 'Q99593-2', 'Q13207', 'O15119', 'Q8IWI9-3', 'Q8IWI9-3', 'Q9Y458', 'Q9Y458', 'O43435', 'Q96SF7-2'], 'base_pair_representation': ['GTG', 'GTG', 'GTG', 'GTG', 'GTG', 'GTT', 'GTG', 'GTC', 'GTG', 'GTC', 'GTT', 'GTT', 'GTC', 'GTG', 'GTT', 'TGC', 'GTG', 'GTG', 'GTG', 'GTG', 'GTT', 'GTT', 'GTG', 'GTG', 'CAG', 'AGC', 'AGC', 'GGC', 'GAG', 'GAT', 'CAG', 'CAG', 'CAC', 'TAC', 'TAC', 'AGC', 'TAC', 'ACC', 'ACC', 'GCG', 'GGC', 'ACC', 'AGC', 'GGG', 'GGG', 'ACG', 'CAC', 'ACC', 'ACC', 'GAG', 'GAG', 'CAG', 'GAG', 'CTA', 'CTG', 'CTG', 'CTG', 'CTG', 'CTG', 'CTA', 'CTG', 'CTG', 'CTC', 'CTC', 'CTG', 'CTG', 'CTG', 'CTG', 'CTC', 'CTC', 'CTC', 'CTG', 'CTC', 'CTG', 'CTC', 'CTG', 'CTG', 'CTG', 'CTC', 'CTG', 'CTG', 'CTC', 'CTC', 'CTT', 'CTT', 'CTA', 'CTG'], 'cDNA_position_two': [335, 131, 344, 422, 335, 200, 314, 806, 617, 806, 230, 230, 416, 131, 230, 305, 206, 206, 320, 314, 230, 230, 335, 26, 338, 281, 281, 134, 347, 425, 338, 203, 317, 809, 620, 281, 809, 233, 233, 419, 134, 233, 308, 209, 209, 323, 317, 233, 233, 284, 284, 338, 29, 341, 284, 284, 137, 350, 428, 341, 206, 320, 173, 173, 812, 623, 284, 812, 23, 236, 236, 134, 422, 137, 236, 311, 212, 212, 173, 326, 320, 236, 236, 287, 287, 341, 32], 'gencode_transcription_id': ['ENST00000332710.4', 'ENST00000366871.3', 'ENST00000369429.3', 'ENST00000369663.5', 'ENST00000359500.3', 'ENST00000335385.3', 'ENST00000349155.2', 'ENST00000449599.1', 'ENST00000389554.3', 'ENST00000295743.4', 'ENST00000219905.7', 'ENST00000570161.1', 'ENST00000177694.1', 'ENST00000296946.2', 'ENST00000389936.4', 'ENST00000408931.3', 'ENST00000393853.4', 'ENST00000240335.1', 'ENST00000240328.3', 'ENST00000257566.3', 'ENST00000566586.1', 'ENST00000545763.1', 'ENST00000329705.7', 'ENST00000207157.3', 'ENST00000332710.4', 'ENST00000395224.2', 'ENST00000279386.2', 'ENST00000366871.3', 'ENST00000369429.3', 'ENST00000369663.5', 'ENST00000359500.3', 'ENST00000335385.3', 'ENST00000349155.2', 'ENST00000449599.1', 'ENST00000389554.3', 'ENST00000553607.1', 'ENST00000295743.4', 'ENST00000219905.7', 'ENST00000570161.1', 'ENST00000177694.1', 'ENST00000296946.2', 'ENST00000389936.4', 'ENST00000408931.3', 'ENST00000393853.4', 'ENST00000240335.1', 'ENST00000240328.3', 'ENST00000257566.3', 'ENST00000566586.1', 'ENST00000545763.1', 'ENST00000373296.3', 'ENST00000373294.5', 'ENST00000329705.7', 'ENST00000207157.3', 'ENST00000332710.4', 'ENST00000395224.2', 'ENST00000279386.2', 'ENST00000366871.3', 'ENST00000369429.3', 'ENST00000369663.5', 'ENST00000359500.3', 'ENST00000335385.3', 'ENST00000349155.2', 'ENST00000405440.2', 'ENST00000310346.4', 'ENST00000449599.1', 'ENST00000389554.3', 'ENST00000553607.1', 'ENST00000295743.4', 'ENST00000349716.5', 'ENST00000219905.7', 'ENST00000570161.1', 'ENST00000367821.3', 'ENST00000177694.1', 'ENST00000296946.2', 'ENST00000389936.4', 'ENST00000408931.3', 'ENST00000393853.4', 'ENST00000240335.1', 'ENST00000526441.1', 'ENST00000240328.3', 'ENST00000257566.3', 'ENST00000566586.1', 'ENST00000545763.1', 'ENST00000373296.3', 'ENST00000373294.5', 'ENST00000329705.7', 'ENST00000207157.3'], 'cDNA_position_three': [336, 132, 345, 423, 336, 201, 315, 807, 618, 807, 231, 231, 417, 132, 231, 306, 207, 207, 321, 315, 231, 231, 336, 27, 339, 282, 282, 135, 348, 426, 339, 204, 318, 810, 621, 282, 810, 234, 234, 420, 135, 234, 309, 210, 210, 324, 318, 234, 234, 285, 285, 339, 30, 342, 285, 285, 138, 351, 429, 342, 207, 321, 174, 174, 813, 624, 285, 813, 24, 237, 237, 135, 423, 138, 237, 312, 213, 213, 174, 327, 321, 237, 237, 288, 288, 342, 33], 'chr': ['chr22', 'chr6', 'chr1', 'chr6', 'chr22', 'chr11', 'chr12', 'chr3', 'chr2', 'chr3', 'chr15', 'chr15', 'chr17', 'chr6', 'chr15', 'chr7', 'chr17', 'chr17', 'chr17', 'chr12', 'chr15', 'chr15', 'chr22', 'chr1', 'chr22', 'chr16', 'chr16', 'chr6', 'chr1', 'chr6', 'chr22', 'chr11', 'chr12', 'chr3', 'chr2', 'chr16', 'chr3', 'chr15', 'chr15', 'chr17', 'chr6', 'chr15', 'chr7', 'chr17', 'chr17', 'chr17', 'chr12', 'chr15', 'chr15', 'chrX', 'chrX', 'chr22', 'chr1', 'chr22', 'chr16', 'chr16', 'chr6', 'chr1', 'chr6', 'chr22', 'chr11', 'chr12', 'chr12', 'chr12', 'chr3', 'chr2', 'chr16', 'chr3', 'chr12', 'chr15', 'chr15', 'chr1', 'chr17', 'chr6', 'chr15', 'chr7', 'chr17', 'chr17', 'chr12', 'chr17', 'chr12', 'chr15', 'chr15', 'chrX', 'chrX', 'chr22', 'chr1']}
        _consensus_length = 3
        _n_instances = 3
        _domain_id = 'PF00907'

        return cls(domain_id=_domain_id, consensus_length=_consensus_length, n_instances=_n_instances, meta_domain_mapping=pd.DataFrame(r))

class Test_meta_domain(unittest.TestCase):
    
    def test_invalid_domain_id(self):
        with self.assertRaises(UnsupportedMetaDomainIdentifier):
            MetaDomain.initializeFromDomainID('PFTEST')
            
    def test_get_codons_aligned_to_consensus_position(self):
        # mock the metadomain
        mock_metadom = mock_MetaDomain.mock_PF00907_metadomain_first_three_consensus_positions()
        
        self.assertTrue(len(mock_metadom.get_codons_aligned_to_consensus_position(0)) == 13)
        self.assertTrue(len(mock_metadom.get_codons_aligned_to_consensus_position(1)) == 15)
        self.assertTrue(len(mock_metadom.get_codons_aligned_to_consensus_position(2)) == 17)
        
        with self.assertRaises(ConsensusPositionOutOfBounds):
            len(mock_metadom.get_codons_aligned_to_consensus_position(3))
        
        with self.assertRaises(ConsensusPositionOutOfBounds):
            len(mock_metadom.get_codons_aligned_to_consensus_position(-4))
        
    def test_get_consensus_position_for_uniprot_position(self):
        # mock the metadomain
        mock_metadom = mock_MetaDomain.mock_PF00907_metadomain_first_three_consensus_positions()
        
        # check for a single occurrence of a uniprot
        self.assertTrue(mock_metadom.get_consensus_position_for_uniprot_position(uniprot_ac='O43435', uniprot_position=111) == 0)
        self.assertTrue(mock_metadom.get_consensus_position_for_uniprot_position(uniprot_ac='O43435', uniprot_position=112) == 1)
        self.assertTrue(mock_metadom.get_consensus_position_for_uniprot_position(uniprot_ac='O43435', uniprot_position=113) == 2)
        
        # check of mutliple occurrences of the same uniprot
        self.assertTrue(mock_metadom.get_consensus_position_for_uniprot_position(uniprot_ac='Q8IWI9-4', uniprot_position=76) == 0)
        self.assertTrue(mock_metadom.get_consensus_position_for_uniprot_position(uniprot_ac='Q8IWI9-4', uniprot_position=77) == 1)
        self.assertTrue(mock_metadom.get_consensus_position_for_uniprot_position(uniprot_ac='Q8IWI9-4', uniprot_position=78) == 2)
        
        # check for non-existing values
        self.assertTrue(mock_metadom.get_consensus_position_for_uniprot_position(uniprot_ac='TESTFAIL', uniprot_position=9999) is None)
        
        # add a malformation and test again
        malformed_row = {'amino_acid_residue': 'T', 'domain_id': 'PF00907', 'amino_acid_position': 77, 'cDNA_position_two': 233, 'cDNA_position_three': 234, 'consensus_pos': 0, 'strand': '+', 'chromosome_position_base_pair_one': 41961324, 'chromosome_position_base_pair_three': 41961326, 'chr': 'chr15', 'chromosome_position_base_pair_two': 41961325, 'base_pair_representation': 'ACC', 'uniprot_ac': 'Q8IWI9-4', 'cDNA_position_one': 232, 'gencode_transcription_id': 'ENST00000219905.7'}
        mock_metadom.meta_domain_mapping = mock_metadom.meta_domain_mapping.append(malformed_row, ignore_index=True)
        
        with self.assertRaises(MalformedMetaDomain):
            mock_metadom.get_consensus_position_for_uniprot_position(uniprot_ac='Q8IWI9-4', uniprot_position=77)
        
if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()